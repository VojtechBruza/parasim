Here follows the logic behind NaturalScaleFormat.java (note, the discovery process was quite painstaking).

Note, a basic fact: Labeled ticks should correspond to multiples of a unit,
in the case of linear scale, integer exponents of 10 (logarithmic scale shifts
it to the exponent). However, sometimes, such labels are too far apart, therefore,
the intervals can be divided in halves or in fifths.

Further problem is, that the dimension of label is bounded.

1) find size of minimum label dimension in model
2) find nearest greater integer exponent of 10 -- this is the extent -> corresponding to tickWidth in view coordinates
3) if the tickWidth (and extent) can be divided by 2 or 5 while being greater than label dimension, do it (and adjust number of small ticks per big accordingly)
    -> divided by two is enough
-- steps 4--5 are optional
4) now see, how many such labels there are -- divide rule's size by tickWidth
5) create an appropriate decimal format and see if it fits the extent, otherwise retrace steps by enlarging extent and repeating steps 4--5
    -> actually, this can be made easier -- the widest number is (num_of_ticks)E(magnitude_of_extent_in_model) -- needs some adjustment with 2 and 5 ticks
---
6) now find the lowest integer multiple of extent (beware of vertical coordinates which are inverted) -- the start
    -> this is important as labels should not be "in between"
7) create small ticks from start to origin
8) create big and small ticks from start upwards to size (or downwards to zero in the case of vertical coordinates)